name: Test meta Core for ShellCrash

on:
  workflow_dispatch:
    inputs:
      tag1:
        description: 'project name of meta, such as MetaCubeX/mihomo'
        required: true
        type: string
      tag2:
        description: 'tag or branches of meta, such as v1.18.0 or Alpha'
        required: true
        type: string
      tag3:
        description: 'a new prerelease name or not, if value=0, then only upload-artifact'
        required: false
        type: string
      tag4:
        description: 'build tags'
        required: false
        type: string
jobs:
  go:
    runs-on: ubuntu-latest
    outputs:
      version: ${{steps.go.outputs.version}}
    steps:
      - name: get latest go version
        id: go
        run: |
          echo version=$(curl -s https://raw.githubusercontent.com/actions/go-versions/update-versions-manifest-file/versions-manifest.json | grep -oE '"version": "[0-9]{1}.[0-9]{1,}(.[0-9]{1,})?"' | head -1 | cut -d':' -f2 | sed 's/ //g; s/"//g') >> $GITHUB_OUTPUT
  
  meta:
    runs-on: ubuntu-latest
    needs: go
    env:
      REPO: ${{ github.event.inputs.tag1 }}
      TAGS: ${{ github.event.inputs.tag4 }}
    outputs:
      version: ${{steps.meta.outputs.version}}
      tags: ${{steps.meta.outputs.tags}}
    steps:
      - uses: actions/checkout@v4.1.1
        with:
          repository: ${{ github.event.inputs.tag1 }}
          ref: ${{ github.event.inputs.tag2 }}
          fetch-depth: 0

      - name: setup go
        uses: actions/setup-go@v4.1.0
        with:
          go-version: ${{needs.go.outputs.version}}

  cross:
    strategy:
      matrix:
        include:
          # linux
          - name: linux-amd64
            goos: linux
            goarch: amd64
            goamd64: v1
          # - name: linux-386
            # goos: linux
            # goarch: 386
          # - name: linux-arm64
            # goos: linux
            # goarch: arm64
          # - name: linux-armv5
            # goos: linux
            # goarch: arm
            # goarm: 5
          # - name: linux-armv7
            # goos: linux
            # goarch: arm
            # goarm: 7
          # - name: linux-mips-softfloat
            # goos: linux
            # goarch: mips
            # gomips: softfloat
          # - name: linux-mipsel-softfloat
            # goos: linux
            # goarch: mipsle
            # gomips: softfloat
          # - name: linux-mipsel-hardfloat
            # goos: linux
            # goarch: mipsle
            # gomips: hardfloat   

      fail-fast: false
    runs-on: ubuntu-latest
    needs: meta
    env:
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}
      GOAMD64: ${{ matrix.goamd64 }}
      GOARM: ${{ matrix.goarm }}
      GOMIPS: ${{ matrix.gomips }}
      CGO_ENABLED: 0
      TAGS: ${{needs.meta.outputs.tags}}
      VERSION: ${{ github.event.inputs.tag2 }}
    steps:
      - name: Checkout meta
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4
        with:
          repository: ${{ github.event.inputs.tag1 }}
          ref: ${{ github.event.inputs.tag2 }}
          fetch-depth: 1
          
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ steps.go.outputs.version }}
          
      - name: build core
        id: build
        run: go build -v -trimpath -ldflags "-X 'github.com/sagernet/meta/constant.Version=${VERSION}' -s -w -buildid=" --tags="${TAGS}" 
        
      - name: Upload file to workspace
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: meta
          
  push_prerelease:
    needs: 
      - cross
      - meta
    runs-on: ubuntu-latest
    env: 
      RELEASE: ${{ github.event.inputs.tag3 }}
      VERSION: ${{ github.event.inputs.tag2 }}
    steps:
      - name: Download file from workspace
        uses: actions/download-artifact@v4
        with:
          path: ./tmp
          
      - name: Zip core by tar
        run: |      
          for arch in amd64 armv5 armv7 arm64 mips-softfloat mipsel-hardfloat mipsel-softfloat;do
            mv -f ./tmp/linux-${arch}/meta ./tmp/CrashCore
            chmod +x ./tmp/CrashCore
            tar --no-same-owner -zcvf ./tmp/singbox-linux-${arch}.tar.gz -C ./tmp CrashCore
          done

      - name: Create Release and Upload Release Asset
        if: ${{ env.RELEASE != '0' }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: singbox_core${{ github.event.inputs.tag3 }}
          name: singbox_core${{ github.event.inputs.tag3 }}
          body: "The ${{env.VERSION}} version of ${{ github.event.inputs.tag1 }} \n这是${{ github.event.inputs.tag1 }}的${{env.VERSION}}版本内核文件\nhttps://github.com/${{ github.event.inputs.tag1 }}/releases \nOnly support for ShellCrash\n仅适配ShellCrash项目使用"
          draft: false
          prerelease: true
          files: |
            ./tmp/singbox* 
            
      - name: upload artifact
        if: ${{ env.RELEASE == '0' }}
        uses: actions/upload-artifact@v4.1.0
        with:
          name: meta-${{env.VERSION}}-${{matrix.jobs.output}}
          path: |
            ./tmp/meta*
          compression-level: 9   
          
      - name: Cleanup Workflow
        uses: Mattraks/delete-workflow-runs@main
        with:
          retain_days: 1
          keep_minimum_runs: 2      
